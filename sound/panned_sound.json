{
    "panned_sound.py": "import pyttsx3\nfrom pydub import AudioSegment\nfrom pydub.playback import play\nimport os\n\n# Initialize pyttsx3\nengine = pyttsx3.init()\nengine.setProperty('rate', 150)  # Set a faster speech rate\n\n# Function to handle speech with volume adjustments and spatial channels\ndef text_to_speech_proximity_spatial(objects, distances, positions, importance):\n    combined_audio = AudioSegment.silent(duration=0)  # Start with an empty AudioSegment\n\n    # Iterate over the objects and queue them for speech output\n    for obj, dist, pos, imp in zip(objects, distances, positions, importance):\n        # Adjust volume more noticeably based on distance\n        # Closer distances will be louder, and farther ones quieter\n        base_volume = max(-30, -1 * dist)  # Convert distance to a negative dB adjustment\n\n        # Adjust volume further by factoring in importance\n        adjusted_volume = base_volume + (imp / 10)  # Importance scaled to adjust volume\n\n        # Generate TTS speech and save it to a temporary \"output.mp3\" file\n        output_filename = \"output.mp3\"\n        engine.save_to_file(obj, output_filename)\n        engine.runAndWait()\n\n        speech_audio = AudioSegment.from_file(output_filename)\n\n        # Spatial panning based on position: left, right, or center\n        if pos < 0.3:\n            # Pan to the left channel\n            panned_audio = speech_audio.pan(-1)  # Left\n        elif pos > 0.7:\n            # Pan to the right channel\n            panned_audio = speech_audio.pan(1)   # Right\n        else:\n            # Center channel\n            panned_audio = speech_audio.pan(0)   # Center\n\n        # Apply distance-based and importance-based volume adjustment\n        louder_audio = panned_audio + adjusted_volume  # Adjust volume in dB\n        smoother_audio = louder_audio.fade_in(50).fade_out(50)  # Smooth transition\n\n        # Append the processed audio to the combined_audio segment\n        combined_audio += smoother_audio\n\n    # Export the final combined audio to \"test.mp3\"\n    combined_audio.export(\"test.mp3\", format=\"mp3\")\n    print(\"Generated MP3 file: test.mp3\")\n\n    # Play the generated audio file\n    play(combined_audio)\n\n# Example detected objects, distances, positions, and importance\ndetected_objects = [\"car\", \"person\", \"car\"]\ndistances = [4.08, 4.95, 9.9]  # Proximity in meters\npositions = [0.51, 0.065, 0.7]  # Spatial position: left (0), center (0.5), right (1)\nimportance = [5, 10, 3]  # Importance levels\n\n# Call the function to output spatially-aware, proximity and importance-based TTS\ntext_to_speech_proximity_spatial(detected_objects, distances, positions, importance)\n"
}